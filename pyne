#!/usr/bin/env python3

import argparse
import sys
import os
import json
import re

"""
This tool can be used to write Python one-liners conveniently.

"""

def process(BEGIN, BODY, END, opt_no_strip=False):
    L = None # Contains the current line that is being processed
    P = print
    J = json
    R = re

    if BEGIN: 
        exec(BEGIN)

    for L in sys.stdin:
        if not opt_no_strip: # By default we will strip the line
            L = L.strip()
        exec(BODY)

    if END:
        exec(END)

def main():
    parser = argparse.ArgumentParser("Python one-liner tool to process lines one by one", 
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("--no-strip", action='store_true', required=False,
                        default=False, help=("Disables stripping leading and trailing " +
                                             "whitespaces."))
    parser.add_argument("--begin", type=str, nargs=1, required=False, default="", 
        help=("BEGIN block that gets executed once before processing any line.\n" + 
            "Any variables defined in this block are available throughout the program."))
    parser.add_argument("body", type=str, nargs=1,
        help=("BODY block that gets executed for each line.\n" +
              "The following variables are available during the execution of the program. \n" +
              "     L - Current line being processed (refer the --no-strip argument)\n" +
              "     P - print() function\n" +
              "     J - JSON module\n" + 
              "     R - re module for regex processing\n"))
    parser.add_argument("--end", type=str, nargs=1, required=False, default="", 
        help=("END block that gets executed once after processing all lines.\n" + 
            "Any variables defined in BEGIN or BODY are available in this block."))

    args = parser.parse_args()
    print(args)

    process(args.begin[0], args.body[0], args.end[0])

if __name__ == '__main__':
    main()
